(1)網路流量擬合
#====================================
# 匯入外部模組
#====================================
import numpy as np
import matplotlib.pyplot as plt
import scipy as sp
import math
import pandas as pd

#----------------------------------
# 網路流量資料
# (1)時間序列
# (2)流量
#----------------------------------
df = pd.read_csv('webTraffic.csv', names=['d1', 'd2'])

#----------------------------------
# 找出趨近測試資料的n階方程式係數
#----------------------------------
fp2=sp.polyfit(df['d1'], df['d2'], 2)
fp10=sp.polyfit(df['d1'], df['d2'], 10)

#----------------------------------
# 方程式
#----------------------------------
f2=sp.poly1d(fp2)
f10=sp.poly1d(fp10)

#----------------------------------
# 計算誤差
#----------------------------------
print('2階誤差:', math.log(sp.sum(((df['d2']-f2(df['d1']))**2))))
print('10階誤差:', math.log(sp.sum(((df['d2']-f10(df['d1']))**2))))

#---------------------------
# 圖形設定/中文設定
#---------------------------
plt.rcParams['font.sans-serif']=['SimHei']
fig = plt.figure()

#---------------------------
# 設定圖標題
#---------------------------
plt.title('網路流量')

#---------------------------
# 設定x軸及y軸標題
#---------------------------
plt.xlabel('時間序列')
plt.ylabel('流量')

#---------------------------
# 將測試資料畫在圖上
#---------------------------
plt.plot(df['d1'], df['d2'], 'y+')

#---------------------------
# 產生x座標值, 代入方程式
#---------------------------
fx=sp.linspace(0, len(df), 1000)
plt.plot(fx, f2(fx), 'r-', linewidth=4)
plt.plot(fx, f10(fx), 'g-', linewidth=4)

#---------------------------
# 產生標籤說明
#---------------------------
plt.legend(['流量', '2階', '10階'], loc="upper left")

#---------------------------
# 畫出格線
#---------------------------
plt.grid()

#---------------------------
# 顯示圖檔
#---------------------------
plt.show()





(2)預測
#====================================
# 匯入外部模組
#====================================
import matplotlib.pyplot as plt
import scipy as sp
import math
import pandas as pd

#----------------------------------
# 網路流量資料
# (1)時間序列
# (2)流量
#----------------------------------
df = pd.read_csv('webTraffic.csv', names=['d1', 'd2'])

#----------------------------------
# 找出趨近測試資料的n階方程式係數
#----------------------------------
tn=650
training_data = df[['d1', 'd2']][:tn]

fp2=sp.polyfit(training_data['d1'], training_data['d2'], 2)
fp10=sp.polyfit(training_data['d1'], training_data['d2'], 10)

#----------------------------------
# 方程式
#----------------------------------
f2=sp.poly1d(fp2)
f10=sp.poly1d(fp10)

#----------------------------------
# 計算誤差
#----------------------------------
print('2階誤差:', math.log(sp.sum(((df['d2']-f2(df['d1']))**2))))
print('10階誤差:', math.log(sp.sum(((df['d2']-f10(df['d1']))**2))))

#---------------------------
# 圖形設定/中文設定
#---------------------------
plt.rcParams['font.sans-serif']=['SimHei']
fig = plt.figure()

#---------------------------
# 設定圖標題
#---------------------------
plt.title('網路流量')

#---------------------------
# 設定x軸及y軸標題
#---------------------------
plt.xlabel('時間序列')
plt.ylabel('流量')

#---------------------------
# 將測試資料畫在圖上
#---------------------------
plt.axis([-100, 800, 0, 7500])
plt.plot(df['d1'], df['d2'], 'y+')

#---------------------------
# 產生x座標值, 代入方程式
#---------------------------
fx=sp.linspace(0, tn, 1000)
plt.plot(fx, f2(fx), 'r-', linewidth=6)
plt.plot(fx, f10(fx), 'g-', linewidth=6)

#---------------------------
# 畫出預測線
#---------------------------
fx=sp.linspace(tn, len(df), 200)
plt.plot(fx, f2(fx), 'r-', linewidth=2)
plt.plot(fx, f10(fx), 'g-', linewidth=2)

#---------------------------
# 產生標籤說明
#---------------------------
plt.legend(['流量', '2階', '10階'], loc="upper left")

#---------------------------
# 畫出格線
#---------------------------
plt.grid()

#---------------------------
# 顯示圖檔
#---------------------------
plt.show()
