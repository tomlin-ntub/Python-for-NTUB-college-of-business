(1)
#----------------------------------
# 匯入pandas模組
#----------------------------------
import pandas as pd

#----------------------------------
# 用pandas的read_csv()讀入資料,
# 讀入的結構是一個 data frame
#----------------------------------
df = pd.read_csv('iris.csv', names=['d0', 'd1', 'd2', 'd3', 'd4'])

#----------------------------------
# 選取/增加欄位
#----------------------------------
df['d5'] = df['d0'] + df['d1']
df2 = df[['d0', 'd1', 'd5']]

#----------------------------------
# 排序
#----------------------------------
df3=df2.sort_values(by='d5', ascending=False)	

#----------------------------------
# 輸出
#----------------------------------
print(df3)




(2)KNN
#--------------------------------
# 匯入外部模組
#--------------------------------
import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier

#-------------------------------------------------
# 花萼長:0, 花萼寬:1, 花瓣長:2, 花瓣寬:3, 花種:4
#-------------------------------------------------
df = pd.read_csv('iris.csv', names=['d0', 'd1', 'd2', 'd3', 'd4'])

#---------------------------
# 亂數重排資料
#---------------------------
df2 = df.sample(frac=1)
print(df2)


#---------------------------
# 訓練資料個數
#---------------------------
tn=120

#---------------------------
# 訓練資料及標籤
#---------------------------
training_data  = df2[['d0', 'd1']][:tn]
training_label = df2['d4'][:tn]

#---------------------------
# 測試資料及標籤
#---------------------------
testing_data  = df2[['d0', 'd1']][tn:]
testing_label = df2['d4'][tn:]

#***********************************************
# 建立自動分類機器人
#***********************************************
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(training_data, training_label)

#---------------------------
# 分類機器人測試
#---------------------------
print('正確:')
print(testing_label.values.tolist())
print()

predict = knn.predict(testing_data)
print('預測:')
print(predict)
print()

#---------------------------
# 和正確資料比對
#---------------------------
results = testing_label == predict
print('比對:')
print(results)
print()

#---------------------------
# 正確率
#---------------------------
print('正確率:', round(np.sum(results)/len(results), 2))





(3)SVM
#--------------------------------
# 匯入外部模組
#--------------------------------
import numpy as np
import pandas as pd
from sklearn import svm

#-------------------------------------------------
# 花萼長:0, 花萼寬:1, 花瓣長:2, 花瓣寬:3, 花種:4
#-------------------------------------------------
df = pd.read_csv('iris.csv', names=['d0', 'd1', 'd2', 'd3', 'd4'])

#---------------------------
# 亂數重排資料
#---------------------------
df2 = df.sample(frac=1)
print(df2)

#---------------------------
# 訓練資料個數
#---------------------------
tn=120

#---------------------------
# 訓練資料及標籤
#---------------------------
training_data  = df2[['d0', 'd1']][:tn]
training_label = df2['d4'][:tn]

#---------------------------
# 測試資料及標籤
#---------------------------
testing_data  = df2[['d0', 'd1']][tn:]
testing_label = df2['d4'][tn:]


#***********************************************
# 建立自動分類機器人
#***********************************************
svm_linear = svm.SVC(kernel='linear', C=1.0)
svm_linear.fit(training_data, training_label)

#---------------------------
# 分類機器人測試
#---------------------------
print('正確:')
print(testing_label.values.tolist())
print()

predict = svm_linear.predict(testing_data)
print('預測:')
print(predict)
print()

#---------------------------
# 和正確資料比對
#---------------------------
results = testing_label == predict
print('比對:')
print(results)
print()

#---------------------------
# 正確率
#---------------------------
print('正確率:', round(np.sum(results)/len(results), 2))




(3a)SVM-白酒
#--------------------------------
# 匯入外部模組
#--------------------------------
import numpy as np
import pandas as pd
from sklearn import svm

#-------------------------------------------------
# 固定酸度(0), 揮發性酸度(1), 檸檬酸(2), 殘糖(3)
# 氯化物(4), 游離二氧化硫(5), 總二氧化硫(6), 密度(7)
# pH值(8), 硫酸鹽(9), 醇(10), 品級(11)
#-------------------------------------------------
df = pd.read_csv('liquor.csv', names=['d0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'd10', 'd11'])

#---------------------------
# 亂數重排資料
#---------------------------
df2 = df.sample(frac=1)
print(df2)

#---------------------------
# 特徵值正規化
#---------------------------
df['d0'] = (df['d0'] - df['d0'].mean()) / (df['d0'].max() - df['d0'].min())
df['d1'] = (df['d1'] - df['d1'].mean()) / (df['d1'].max() - df['d1'].min())
df['d2'] = (df['d2'] - df['d2'].mean()) / (df['d2'].max() - df['d2'].min())
df['d3'] = (df['d3'] - df['d3'].mean()) / (df['d3'].max() - df['d3'].min())
df['d4'] = (df['d4'] - df['d4'].mean()) / (df['d4'].max() - df['d4'].min())
df['d5'] = (df['d5'] - df['d5'].mean()) / (df['d5'].max() - df['d5'].min())
df['d6'] = (df['d6'] - df['d6'].mean()) / (df['d6'].max() - df['d6'].min())
df['d7'] = (df['d7'] - df['d7'].mean()) / (df['d7'].max() - df['d7'].min())
df['d8'] = (df['d8'] - df['d8'].mean()) / (df['d8'].max() - df['d8'].min())
df['d9'] = (df['d9'] - df['d9'].mean()) / (df['d9'].max() - df['d9'].min())
df['d10'] = (df['d10'] - df['d10'].mean()) / (df['d10'].max() - df['d10'].min())

#---------------------------
# 訓練資料個數
#---------------------------
tn=4000

#---------------------------
# 訓練資料及標籤
#---------------------------
training_data  = df2[['d0', 'd1', 'd2', 'd3']][:tn]
training_label = df2['d11'][:tn]

#---------------------------
# 測試資料及標籤
#---------------------------
testing_data  = df2[['d0', 'd1', 'd2', 'd3']][tn:]
testing_label = df2['d11'][tn:]


#***********************************************
# 建立自動分類機器人
#***********************************************
svm_linear = svm.SVC(kernel='linear', C=1.0)
svm_linear.fit(training_data, training_label)

#---------------------------
# 分類機器人測試
#---------------------------
print('正確:')
print(testing_label.values.tolist())
print()

predict = svm_linear.predict(testing_data)
print('預測:')
print(predict)
print()

#---------------------------
# 和正確資料比對
#---------------------------
results = testing_label == predict
print('比對:')
print(results)
print()

#---------------------------
# 正確率
#---------------------------
print('正確率:', round(np.sum(results)/len(results), 2))





(3b)特徵選取
#--------------------------------
# 匯入外部模組
#--------------------------------
import numpy as np
import pandas as pd
from sklearn import svm
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVR

#-------------------------------------------------
# 固定酸度(0), 揮發性酸度(1), 檸檬酸(2), 殘糖(3)
# 氯化物(4), 游離二氧化硫(5), 總二氧化硫(6), 密度(7)
# pH值(8), 硫酸鹽(9), 醇(10), 品級(11)
#-------------------------------------------------
df = pd.read_csv('liquor.csv', names=['d0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'd10', 'd11'])

#---------------------------
# 亂數重排資料
#---------------------------
df2 = df.sample(frac=1)
print(df2)

#---------------------------
# 正規化
#---------------------------
df['d0'] = (df['d0'] - df['d0'].mean()) / (df['d0'].max() - df['d0'].min())
df['d1'] = (df['d1'] - df['d1'].mean()) / (df['d1'].max() - df['d1'].min())
df['d2'] = (df['d2'] - df['d2'].mean()) / (df['d2'].max() - df['d2'].min())
df['d3'] = (df['d3'] - df['d3'].mean()) / (df['d3'].max() - df['d3'].min())
df['d4'] = (df['d4'] - df['d4'].mean()) / (df['d4'].max() - df['d4'].min())
df['d5'] = (df['d5'] - df['d5'].mean()) / (df['d5'].max() - df['d5'].min())
df['d6'] = (df['d6'] - df['d6'].mean()) / (df['d6'].max() - df['d6'].min())
df['d7'] = (df['d7'] - df['d7'].mean()) / (df['d7'].max() - df['d7'].min())
df['d8'] = (df['d8'] - df['d8'].mean()) / (df['d8'].max() - df['d8'].min())
df['d9'] = (df['d9'] - df['d9'].mean()) / (df['d9'].max() - df['d9'].min())
df['d10'] = (df['d10'] - df['d10'].mean()) / (df['d10'].max() - df['d10'].min())

#---------------------------
# 訓練資料個數
#---------------------------
tn=500

#---------------------------
# 訓練資料及標籤
#---------------------------
training_data  = df2[['d0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'd10']][:tn]
training_label = df2['d11'][:tn]

#------------------------
# 選用某種分類器
#------------------------
#clf=LogisticRegression()
svr = SVR(kernel="linear")

#----------------------------------
# 選出2個特徵作為主要分類依據
#----------------------------------
#selector=RFE(clf, n_features_to_select=2)
selector=RFE(svr, n_features_to_select=5)

#----------------------------------
# 選出之分類特徵
#----------------------------------
selector=selector.fit(training_data, training_label)
print('選出之分類特徵:')
print('-'*30)
print(selector.support_)
print(selector.ranking_)





(4)SVM-rbf
#--------------------------------
# 匯入外部模組
#--------------------------------
import numpy as np
import pandas as pd
from sklearn import svm

#-------------------------------------------------
# 固定酸度(0), 揮發性酸度(1), 檸檬酸(2), 殘糖(3)
# 氯化物(4), 游離二氧化硫(5), 總二氧化硫(6), 密度(7)
# pH值(8), 硫酸鹽(9), 醇(10), 品級(11)
#-------------------------------------------------
df = pd.read_csv('liquor.csv', names=['d0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'd10', 'd11'])

#---------------------------
# 亂數重排資料
#---------------------------
df2 = df.sample(frac=1)
print(df2)

#---------------------------
# 特徵值正規化
#---------------------------
'''
df['d0'] = (df['d0'] - df['d0'].mean()) / (df['d0'].max() - df['d0'].min())
df['d1'] = (df['d1'] - df['d1'].mean()) / (df['d1'].max() - df['d1'].min())
df['d2'] = (df['d2'] - df['d2'].mean()) / (df['d2'].max() - df['d2'].min())
df['d3'] = (df['d3'] - df['d3'].mean()) / (df['d3'].max() - df['d3'].min())
df['d4'] = (df['d4'] - df['d4'].mean()) / (df['d4'].max() - df['d4'].min())
df['d5'] = (df['d5'] - df['d5'].mean()) / (df['d5'].max() - df['d5'].min())
df['d6'] = (df['d6'] - df['d6'].mean()) / (df['d6'].max() - df['d6'].min())
df['d7'] = (df['d7'] - df['d7'].mean()) / (df['d7'].max() - df['d7'].min())
df['d8'] = (df['d8'] - df['d8'].mean()) / (df['d8'].max() - df['d8'].min())
df['d9'] = (df['d9'] - df['d9'].mean()) / (df['d9'].max() - df['d9'].min())
df['d10'] = (df['d10'] - df['d10'].mean()) / (df['d10'].max() - df['d10'].min())
'''

#---------------------------
# 訓練資料個數
#---------------------------
tn=4000

#---------------------------
# 訓練資料及標籤
#---------------------------
training_data  = df2[['d1', 'd2', 'd9', 'd10']][:tn]
training_label = df2['d11'][:tn]

#---------------------------
# 測試資料及標籤
#---------------------------
testing_data  = df2[['d1', 'd2', 'd9', 'd10']][tn:]
testing_label = df2['d11'][tn:]


#***********************************************
# 建立自動分類機器人
#***********************************************
svm_linear = svm.SVC(kernel='rbf')
svm_linear.fit(training_data, training_label)

#---------------------------
# 分類機器人測試
#---------------------------
print('正確:')
print(testing_label.values.tolist())
print()

predict = svm_linear.predict(testing_data)
print('預測:')
print(predict)
print()

#---------------------------
# 和正確資料比對
#---------------------------
results = testing_label == predict
print('比對:')
print(results)
print()

#---------------------------
# 正確率
#---------------------------
print('正確率:', round(np.sum(results)/len(results), 2))






(5)找出較好的C, gamma參數
#--------------------------------
# 匯入外部模組
#--------------------------------
import numpy as np
import pandas as pd
from sklearn import svm
from sklearn.model_selection import GridSearchCV

#-------------------------------------------------
# 固定酸度(0), 揮發性酸度(1), 檸檬酸(2), 殘糖(3)
# 氯化物(4), 游離二氧化硫(5), 總二氧化硫(6), 密度(7)
# pH值(8), 硫酸鹽(9), 醇(10), 品級(11)
#-------------------------------------------------
df = pd.read_csv('liquor.csv', names=['d0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'd10', 'd11'])

#---------------------------
# 亂數重排資料
#---------------------------
df2 = df.sample(frac=1)
print(df2)

#---------------------------
# 特徵值正規化
#---------------------------
'''
df['d0'] = (df['d0'] - df['d0'].mean()) / (df['d0'].max() - df['d0'].min())
df['d1'] = (df['d1'] - df['d1'].mean()) / (df['d1'].max() - df['d1'].min())
df['d2'] = (df['d2'] - df['d2'].mean()) / (df['d2'].max() - df['d2'].min())
df['d3'] = (df['d3'] - df['d3'].mean()) / (df['d3'].max() - df['d3'].min())
df['d4'] = (df['d4'] - df['d4'].mean()) / (df['d4'].max() - df['d4'].min())
df['d5'] = (df['d5'] - df['d5'].mean()) / (df['d5'].max() - df['d5'].min())
df['d6'] = (df['d6'] - df['d6'].mean()) / (df['d6'].max() - df['d6'].min())
df['d7'] = (df['d7'] - df['d7'].mean()) / (df['d7'].max() - df['d7'].min())
df['d8'] = (df['d8'] - df['d8'].mean()) / (df['d8'].max() - df['d8'].min())
df['d9'] = (df['d9'] - df['d9'].mean()) / (df['d9'].max() - df['d9'].min())
df['d10'] = (df['d10'] - df['d10'].mean()) / (df['d10'].max() - df['d10'].min())
'''

#---------------------------
# 訓練資料個數
#---------------------------
tn=500

#---------------------------
# 訓練資料及標籤
#---------------------------
training_data  = df2[['d1', 'd2', 'd9', 'd10']][:tn]
training_label = df2['d11'][:tn]

#---------------------------
# 測試資料及標籤
#---------------------------
testing_data  = df2[['d1', 'd2', 'd9', 'd10']][tn:]
testing_label = df2['d11'][tn:]


#---------------------------
# 找較好的C及gamma值
#---------------------------
param_grid = {'C': [0.1, 0.5, 1, 5, 10, 15, 20, 100, 150, 175, 200, 250, 1000],
              'gamma': [0.01, 0.05, 0.1, 0.25, 0.5, 1, 2, 3, 4, 5, 10], }
clf = GridSearchCV(svm.SVC(kernel='rbf'), param_grid)
clf.fit(training_data, training_label)

print("找出較好的C及gamma")
best_C=clf.best_estimator_.C
best_gamma=clf.best_estimator_.gamma

print('C =', best_C)
print('gamma =', best_gamma)
print('-'*60)







(6)NB
#--------------------------------
# 匯入外部模組
#--------------------------------
import numpy as np
from sklearn.naive_bayes import GaussianNB
import pandas as pd

#-------------------------------------------------
# 花萼長:0, 花萼寬:1, 花瓣長:2, 花瓣寬:3, 花種:4
#-------------------------------------------------
df = pd.read_csv('iris.csv', names=['d0', 'd1', 'd2', 'd3', 'd4'])

#---------------------------
# 亂數重排資料
#---------------------------
df2 = df.sample(frac=1)
print(df2)


#---------------------------
# 訓練資料個數
#---------------------------
tn=120

#---------------------------
# 訓練資料及標籤
#---------------------------
training_data  = df2[['d0', 'd1']][:tn]
training_label = df2['d4'][:tn]

#---------------------------
# 測試資料及標籤
#---------------------------
testing_data  = df2[['d0', 'd1']][tn:]
testing_label = df2['d4'][tn:]


#***********************************************
# 建立自動分類機器人
#***********************************************
gnb = GaussianNB()
gnb.fit(training_data, training_label)

#---------------------------
# 分類機器人測試
#---------------------------
print('正確:')
print(testing_label.values.tolist())
print()

predict = gnb.predict(testing_data)
print('預測:')
print(predict)
print()

#---------------------------
# 和正確資料比對
#---------------------------
results = testing_label == predict
print('比對:')
print(results.tolist())
print()

#---------------------------
# 正確率
#---------------------------
print('正確率:', round(np.sum(results)/len(results), 2))


